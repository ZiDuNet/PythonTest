# -*- coding: utf-8 -*-
"""
IDE:               PyCharm Community Edition
-------------------------------------------------
   Project Name:   PythonTest
   File Name：     运算符
   Description :
   Author :       Admin
   date:          2018-6-7
-------------------------------------------------
   Change Activity:
                   2018-6-7:
-------------------------------------------------
"""
__author__ = 'Admin'

print("# --------------------------------------------基本数据类型--------------------------------------------")
a=100
b=121.000
c="字符串"
print (a,b,c)
print("#-------------------------------------------- 多变量赋值--------------------------------------------")
a=b=c=123
a,b,c=1,2,"哈哈哈"
print("#-------------------------------------------- 标准数据类型--------------------------------------------")
#六个标准的数据类型：
#Number（数字）
#String（字符串）
#List（列表）
#Tuple（元组）
#Sets（集合）
#Dictionary（字典）
#Python3 的六个标准数据类型中：
#不可变数据（四个）：Number（数字）、String（字符串）、Tuple（元组）、Sets（集合）；
#可变数据（两个）：List（列表）、Dictionary（字典）。
print("#--------------------------------------------1. Number（数字）--------------------------------------------")
#Python3 支持 int、float、bool、complex（复数）。
# 内置的 type() 函数可以用来查询变量所指的对象类型
a, b, c, d = 20, 5.5, True, 4+3j
print(type(a), type(b), type(c), type(d))
print("#-------------------------------------------- 1.1还可以用 isinstance 来判断：--------------------------------------------")
a=123
print(isinstance(a,int))#解释：a是否是int类型?
#isinstance 和 type 的区别在于：
##区别就是:type()不会认为子类是一种父类类型。
##isinstance()会认为子类是一种父类类型。
##注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。
#例子：
class A:
   pass

class B(A):
    pass

isinstance(A(), A)# returns True:A()是否是A类型？
type(A()) == A# returns True：A()类型==A吗？
isinstance(B(), A)# returns True：B()是否是A类型
type(B()) == A # returns False:B()类型==B吗？
print("#--------------------------------------------1.2可以使用del语句删除一些对象引用--------------------------------------------")
#语法：del var1[,var2[,var3[....,varN]]]]
a=1
del ();
print(a)

print("#--------------------------------------------1.3 数值运算--------------------------------------------")

5 + 4  # 加法
4.3 - 2 # 减法
3 * 7  # 乘法
2 / 4  # 除法，得到一个浮点数
2 // 4 # 除法，得到一个整数
17 % 3 # 取余
2 ** 5 # 乘方
print("#--------------------------------------------1.4 比较运算符--------------------------------------------")
a = 21
b = 10
c = 0
if (a == b):
    print("1 - a 等于 b")
else:
    print("1 - a 不等于 b")

if (a != b):
    print("2 - a 不等于 b")
else:
    print("2 - a 等于 b")

if (a < b):
    print("3 - a 小于 b")
else:
    print("3 - a 大于等于 b")

if (a > b):
    print("4 - a 大于 b")
else:
    print("4 - a 小于等于 b")

# 修改变量 a 和 b 的值
a = 5;
b = 20;
if (a <= b):
    print("5 - a 小于等于 b")
else:
    print("5 - a 大于  b")

if (b >= a):
    print("6 - b 大于等于 a")
else:
    print("6 - b 小于 a")

print("#--------------------------------------------1.5赋值运算符--------------------------------------------")
a = 1
b = 2
c = 0
c = a + b
print("1 - c 的值为：" , c)
c += a
print("2 - c 的值为：" , c)
c *= a
print("3 - c 的值为：" , c)
c /= a
print("4 - c 的值为：" , c)
c = 2
c %= a
print("5 - c 的值为：" , c)
c **= a
print("6 - c 的值为：" , c)
c //= a
print("7 - c 的值为：" , c)
'''
=	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
+=	加法赋值运算符	c += a 等效于 c = c + a
-=	减法赋值运算符	c -= a 等效于 c = c - a
*=	乘法赋值运算符	c *= a 等效于 c = c * a
/=	除法赋值运算符	c /= a 等效于 c = c / a
%=	取模赋值运算符	c %= a 等效于 c = c % a
**=	幂赋值运算符	c **= a 等效于 c = c ** a
//=	取整除赋值运算符	c //= a 等效于 c = c // a
'''

print("#--------------------------------------------1.6Python位运算符--------------------------------------------")
a=60 #60=0011 1100
b=13 #13=0000 1101
#&与运算两个相应位都为1则结果=1
c1 = a & b#12=0000 1100
#|或运算，只要对应二个二进位有一个为1时，结果就为1
c2 = a | b#
#^异或运算，两个对应二进位不一样时，结果为1
c3 = a ^ b
#~按位取反，对应每个二进制位取反，1变0，0变1
c4 = ~a
#<<左移动运算符，运算数的各二进位左移若干位，高位丢弃，低位补0
c5 = a<<2
#>>把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
c6 = a>>2
print("#--------------------------------------------1.7逻辑运算符--------------------------------------------")
#and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
#or	x or y	布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。	(a or b) 返回 10。
#not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False
al=10
bl=20
all=al+2
bll=bl+2
#and  需满足俩条件
if (all>100 and bll<100):
    print("满足true")
else:
    print("不满足条件false")
#or 满足其中一个
if  (all>100 or bll<100):
    print("有一个或多个满足条件 true")
else:
    print("不满足条件false")
if(not(bll>88)): #不大于88则条件成立返回ture
    print("如果条件不为flase则返回true")
else:
    print("他大于88")
print("#--------------------------------------------1.8赋值运算符--------------------------------------------")
print("#--------------------------------------------1.9赋值运算符--------------------------------------------")

print("#--------------------------------------------2.String（字符串）----------------------------------都属于sequence（序列）----------")
#字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\)转义特殊字符。
#字符串截取：变量[头下标:尾下标]
#0 为开始值，-1 为从末尾的开始位置。
#加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。
str = 'wushuo'
print(str)  # 输出字符串
print(str[0:-1])  # 输出第一个到倒数第二个的所有字符
print(str[0])  # 输出字符串第一个字符
print(str[2:5])  # 输出从第三个开始到第五个的字符
print(str[2:])  # 输出从第三个开始的后的所有字符
print(str * 2)  # 输出字符串两次
print(str + "TEST")  # 连接字符串
print(str[0], str[5])#截取第一个，第六个
#使用反斜杠(\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：
print('Ru\noob')
print(r'Ru\noob')
#反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。
#注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。
print("#--------------------------------------------3.List（列表）--------------------------------都属于sequence（序列）------------")
#列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
#列表是写在方括号([])之间、用逗号分隔开的元素列表。
#和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
#列表截取的语法格式如下：变量[头下标:尾下标]
list = ['abcd' , 786 , 2.23 , 'runoob' , 70.2]
list2 = [123 , 'runoob']
print(list)  # 输出完整列表
print(list[0])  # 输出列表第一个元素
print(list[1:3])  # 从第二个开始输出到第三个元素
print(list[2:])  # 输出从第三个元素开始的所有元素
print(list2 * 2)  # 输出两次列表
print(list + list2)  # 连接列表
#List可以被改变
list[1:3]=[666,666]
print(list)
print("#--------------------------------------------4Tuple（元组）--------------------------------都属于sequence（序列）------------")
#元组写在小括号 () 里，元素之间用逗号隔开。
A = ('abcd' , 786 , 2.23 , 'runoob' , 70.2)
B = (123 , 'runoob')
print(A)  # 输出完整元组
print(A[0])  # 输出元组的第一个元素
print(A[1:3])  # 输出从第二个元素开始到第三个元素
print(A[2:])  # 输出从第三个元素开始的所有元素
print(B * 2)  # 输出两次元组
print(A + B)  # 连接元组
#不能修改元素，但它可以包含可变的对象，比如list列表。tup2 = (20,) # 一个元素，需要在元素后添加逗号

print("#--------------------------------------------5.Set（集合）-------------------------无序不重复元素（进行成员关系测试和删除重复元素）-------------------")
#使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
#parame = {value01,value02,...}
#或者
#set(value)
student = {'AA' , 'BB' , 'CC' , 'AA' , 'DD' , 'EE'}
print(student)  # 输出集合，重复的元素被自动去掉
# 成员测试
if ('AA' in student):
    print('AA 在集合中')
else:
    print('AA 不在集合中')
# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')
print(a)
print(a - b)  # a和b的差集
print(a | b)  # a和b的并集
print(a & b)  # a和b的交集
print(a ^ b)  # a和b中不同时存在的元素
print("#--------------------------------------------6.Dictionary（字典）--------------------------------------------")

#内置数据类型。,列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。键(key)必须使用不可变类型。
#在同一个字典中，键(key)必须是唯一的。
dict = {}
dict['one'] = "1 - 菜鸟教程"
dict[2] = "2 - 菜鸟工具"
tinydict = {'name': 'runoob' , 'code': 1 , 'site': 'www.runoob.com'}

print(dict['one'])  # 输出键为 'one' 的值
print(dict[2])  # 输出键为 2 的值
print(tinydict)  # 输出完整的字典
print(tinydict.keys())  # 输出所有键
print(tinydict.values())  # 输出所有值
print("#--------------------------------------------6.Dictionary（字典）--------------------------------------------")

#算术运符
#比较（关系）运算符
#赋值运算符
#逻辑运算符
#位运算符
#成员运算符
#身份运算符
#运算符优先级
